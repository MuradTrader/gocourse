1. Введение в переменные
Определение:

"Переменные хранят и обрабатывают данные во время выполнения программы."

"Понимание переменных — основа для создания надёжных приложений на Go."

2. Объявление переменных
Явное объявление с помощью var
Синтаксис: var <имя> <тип>

var age int          // Не инициализирована (по умолчанию: 0)  
var name string = "John"  
var name1 = "Jane"   // Тип выводится автоматически  

Ключевые моменты:
Тип можно опустить, если переменная инициализирована (например, name1).

Короткое объявление (:=)
Синтаксис: <имя> := <значение>
count := 10          // Тип выводится как int  

Правила:
Можно использовать только внутри функций (локальная область видимости).

"Этот сокращённый синтаксис называют символом гофера 
(gopher symbol) из-за сходства с талисманом Go."

3. Значения по умолчанию (нулевые значения)

Числовые типы: 0.

Логический тип: false.

Строки: "" (пустая строка).

Указатели, срезы, карты, функции, структуры: nil.

4. Область видимости переменных
Локальная область видимости
Переменные доступны только в блоке, 
где объявлены (например, внутри функций, циклов, условий).

Пример:

func printName() {  
  firstName := "Michael"  // Локальная для printName()  
  fmt.Println(firstName)  
}  

func main() {  
  fmt.Println(firstName)  // Ошибка: переменная не определена  
}  

Глобальные переменные
Объявляются вне функций с помощью var:
var middleName = "Kane"  // Доступна во всём пакете  

Ограничение:
Короткое объявление (:=) нельзя использовать для глобальных переменных.

5. Изменяемость и время жизни
Изменяемость: Переменные можно модифицировать во время выполнения.
middleName = "Mayor"  // Изменение глобальной переменной  

Время жизни:
Переменные существуют только в своей области видимости.
Создаются при входе в область видимости; удаляются при выходе.

6. Рекомендации
Соглашения об именовании
Используйте осмысленные имена (например, userAge вместо x).

Это улучшает читаемость и поддерживаемость кода.

Правила объявления
Для глобальных переменных используйте var.
Для локальных переменных применяйте := для упрощения кода.

7. Частые ошибки
Неиспользуемые переменные:
Go выдаёт предупреждения, если переменные объявлены, но не используются.

Конфликты областей видимости:
Попытка доступа к локальным переменным вне их области (например, firstName в main()).

8. Заключение
Ключевые выводы:

Используйте var для глобальных переменных уровня пакета.

Используйте := для краткого объявления локальных переменных.

Область видимости гарантирует эффективное использование памяти и предотвращает нежелательные побочные эффекты.

"Освоение работы с переменными позволяет писать понятный, эффективный и поддерживаемый код на Go."

Следующая лекция: Константы в Go.

Итог:
Переменные в Go — это изменяемые хранилища данных, ограниченные областью видимости. 
Правильное использование стилей объявления (var vs. :=) и понимание области видимости 
обеспечивают эффективное использование памяти и чистоту кода.
Глобальные переменные требуют явного объявления через var, 
тогда как для локальных удобно применять автоматический вывод типа и сокращённый синтаксис.